use dataverse hackathon;

create type geoTagType as closed{
    neighborID: int32,
    boroCode: int32
}

create type MobSigType as closed {
	id: uuid,
    time: datetime,
    device_id: int64,
    cdma_dbm: float?,
    cdma_asu_level: float?,
    cdma_ecio: float?,
    evdo_dbm: float?,
    evdo_asu_level: float?,
    evdo_ecio: float?,
    gsm_dbm: float?,
    gsm_asu_level: float?,
    lte_dbm: float?,
    lte_asu_level: float?,
    lte_rsrp: float?,
    lte_rsrq: float?,
    wcdma_dbm: float?,
    wcdma_asu_level: float?,
    location: point,
    geo_tag: geoTagType?
}

create dataset signal(MobSigType) primary key id autogenerated;


create type SigDurationType as closed{
    id: uuid,
    signal_start_time: datetime,
    signal_end_time: datetime,
    device_id: int64,
    location: point,
    geo_tag: geoTagType
}

drop dataset sig_duration if exists;
create dataset sig_duration(SigDurationType) primary key id autogenerated;


use dataverse hackathon

insert into dataset sig_duration(
for $t in dataset signal
where not(is-null($t.geo_tag))
group by $did := $t.device_id, $loc := $t.location, $gtag := $t.geo_tag with $t
let $start_time := min(for $i in $t return $i.time)
let $end_time := max(for $i in $t return $i.time)
return{
"signal_start_time": $start_time,
"signal_end_time": $end_time,
"device_id": $did,
"location": $loc,
"geo_tag": $gtag
}
)